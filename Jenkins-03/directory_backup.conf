#!/bin/bash

CONFIG_FILE="$HOME/company-backup-system/config/backup.conf"
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
else
    echo "$(date) - ERROR: Configuration file $CONFIG_FILE not found" >> "$HOME/company-backup-system/logs/backup.log"
    exit 1
fi

if [ -z "$BACKUP_SOURCES" ] || [ -z "$BACKUP_DEST" ] || [ -z "$RETENTION_DAYS" ]; then
    echo "$(date) - ERROR: Invalid configuration in $CONFIG_FILE" >> "$HOME/company-backup-system/logs/backup.log"
    exit 1
fi

mkdir -p "$BACKUP_DEST"

TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="${BACKUP_DEST}/backup_${TIMESTAMP}.tar.gz"

echo "$(date) - Starting backup of $BACKUP_SOURCES" >> "$HOME/company-backup-system/logs/backup.log"

# Use GNU tar if available (brew install gnu-tar), or use macOS tar
if command -v gtar &>/dev/null; then
    TAR_CMD="gtar"
else
    TAR_CMD="tar"
fi

$TAR_CMD -czf "$BACKUP_FILE" $BACKUP_SOURCES 2>> "$HOME/company-backup-system/logs/backup.log"

if [ $? -eq 0 ]; then
    echo "$(date) - Backup completed successfully: $BACKUP_FILE" >> "$HOME/company-backup-system/logs/backup.log"
    
    # Apply retention policy (macOS find is slightly different)
    find "$BACKUP_DEST" -name "backup_*.tar.gz" -type f -mtime +$RETENTION_DAYS -delete -print >> "$HOME/company-backup-system/logs/backup.log" 2>&1
    
    exit 0
else
    echo "$(date) - ERROR: Backup failed" >> "$HOME/company-backup-system/logs/backup.log"
    exit 1
fi
